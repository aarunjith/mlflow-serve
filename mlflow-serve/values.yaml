# Default values for mlflow-serve.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
# I prefer ECR in AWS to store and retrieve the images for helm. 
# But a local images built using the dockerfile provided in the repo will also work just fine


replicaCount: 1

image:
  repository: "your container image"
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# Service type can LoadBalancer if deploying on AWS EKS or other cloud managed kubernetes solutions
# Otherwise use NodePort here
service:
  type: LoadBalancer
  port: 80

ingress:
  enabled: false
  className: ""
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
examplemap:
  - name: "MLFLOW_TRACKING_URI"
    value: "<your ml-flow tracking url here>"
  - name: "SERVING_PORT"
    value: "80"
  - name: "MODEL_NAME"
    value: "<put your model name here>"
  - name: "AWS_ACCESS_KEY_ID"
    value: "<AWS Access key here if your artifacts are in s3>"
  - name: "AWS_SECRET_ACCESS_KEY"
    value: "<AWS Secret acces key here if your artifacts are in s3>"
  - name: "MLFLOW_CONDA_HOME"
    value: "/opt/conda/"
